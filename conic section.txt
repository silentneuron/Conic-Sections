import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from ipywidgets import interact

def conic_with_section(alpha=45, beta=30):
    fig = plt.figure(figsize=(12,6))
    
    # ---------------- Left: 3D cone + plane ----------------
    ax3d = fig.add_subplot(121, projection='3d')
    
    h = 3
    r = np.tan(np.radians(alpha)) * h
    theta = np.linspace(0, 2*np.pi, 60)
    z = np.linspace(0, h, 40)
    T, Z = np.meshgrid(theta, z)
    X = (Z/h)*r*np.cos(T)
    Y = (Z/h)*r*np.sin(T)

    # Solid cone (upper & lower)
    ax3d.plot_surface(X, Y, Z, color="orange", alpha=0.6, edgecolor='k')
    ax3d.plot_surface(X, Y, -Z, color="orange", alpha=0.6, edgecolor='k')

    # Plane
    size = 3
    xx = np.array([[-size, size, size, -size]])
    yy = np.array([[-size, -size, size, size]])
    zz = np.tan(np.radians(beta)) * yy
    verts = [list(zip(xx[0], yy[0], zz[0]))]
    plane = Poly3DCollection(verts, alpha=0.3, facecolor='cyan', edgecolor='k')
    ax3d.add_collection3d(plane)

    # Style for 3D
    ax3d.set_xlim(-3,3)
    ax3d.set_ylim(-3,3)
    ax3d.set_zlim(-3,3)
    ax3d.view_init(elev=20, azim=30)
    ax3d.set_title("Cone + Plane")
    ax3d.set_axis_off()

    # ---------------- Right: 2D conic section ----------------
    ax2d = fig.add_subplot(122)
    
    if beta > alpha:  
        # Hyperbola
        x = np.linspace(-3,3,400)
        y = np.sqrt((x**2)/(np.tan(np.radians(beta))**2) - 1)
        ax2d.plot(x, y, 'r')
        ax2d.plot(x, -y, 'r')
        ax2d.set_title("Hyperbola")
    elif beta == alpha:  
        # Parabola
        x = np.linspace(-3,3,400)
        y = (x**2)/4
        ax2d.plot(x, y, 'r')
        ax2d.set_title("Parabola")
    elif beta < alpha and beta > 0:  
        # Ellipse
        t = np.linspace(0, 2*np.pi, 400)
        a = 2
        b = a * np.cos(np.radians(beta))/np.cos(np.radians(alpha))
        x = a*np.cos(t)
        y = b*np.sin(t)
        ax2d.plot(x, y, 'r')
        ax2d.set_title("Ellipse")
    else:  
        # Circle (special ellipse)
        t = np.linspace(0, 2*np.pi, 400)
        r = 2
        ax2d.plot(r*np.cos(t), r*np.sin(t), 'r')
        ax2d.set_title("Circle")

    ax2d.set_aspect("equal")
    ax2d.axhline(0, color='k', lw=0.5)
    ax2d.axvline(0, color='k', lw=0.5)
    ax2d.grid(True, linestyle="--", alpha=0.5)
    ax2d.set_xlim(-3,3)
    ax2d.set_ylim(-3,3)
    ax2d.set_xlabel("X")
    ax2d.set_ylabel("Y")

    plt.show()

# Interactive sliders
interact(conic_with_section, alpha=(20,70,1), beta=(10,80,1))
